[{"content":" My opinion on this is still not stable or true and I might change my mind later when I will really try NixOS.\nI see the constant hype around the NixOS and one of the main selling points is its reproducibility. Under the Ansible, you configure only whats in your playbooks. And it\u0026rsquo;s easy to mess around the system bypassing the Ansible. In NixOS that\u0026rsquo;s not the case. If you make any add-hock changes on NixOS and then run nixos-rebuild all your crafted changes will be gone because they are not in your NixOS config. But this is what I like about the Ansible. I can mess around the system and put in my playbooks only the parts I really like. Next time I will install OS I will get only my particular features. I believe, you could do the same with NixOS, but\u0026hellip; nixos-rebuild sounds too dangerous to have there. As of my understanding now, NixOS is more suitable for server setups, where the all components are well known and you truly need 100% reproducibility.\nThe feature of NixOS I might like is the rollback. You can\u0026rsquo;t do that with the Ansible.\n","permalink":"https://dzintars.dev/posts/nixos/","summary":"My opinion on this is still not stable or true and I might change my mind later when I will really try NixOS.\nI see the constant hype around the NixOS and one of the main selling points is its reproducibility. Under the Ansible, you configure only whats in your playbooks. And it\u0026rsquo;s easy to mess around the system bypassing the Ansible. In NixOS that\u0026rsquo;s not the case. If you make any add-hock changes on NixOS and then run nixos-rebuild all your crafted changes will be gone because they are not in your NixOS config.","title":"NixOS vs Ansible"},{"content":"Why For a long time I didn\u0026rsquo;t care about the note taking too much, thou, I was writing long MS Word documents with the ideas of the project, user stories and other things.\nIt all changed when I switched to the Linux. Because Linux was pretty much new to me, I had a lot to learn and remember. So, gradually I started to write my little runbooks to document the steps I took to get to the point B. For example, how do I create SSH keys. Or how do I configure my firewall. And so on.\nTouch Typing Almost all of the \u0026ldquo;productivity\u0026rsquo;fluencers\u0026rdquo; never mentions the importance of the touch typing to get into habit of note taking. But in my opinion\u0026hellip; that is the very first pill, you should take before getting into note taking. If the typing is the pain for you, then you will not make any notes, nor note taking system. No\u0026hellip; you will take notes, but those will be just occasional sessions. Not a real note taking.\nIt changes, when you are able to type just by looking at the screen. Without hunting for the each letter on the keyboard. Even better, if you can train yourself up to 150 words per minute (wpm), it means, you are able to type almost at a speed of your thought.\nAnsible Over time, after I played with custom runbooks and scripts, I started to write every little system configuration task in Ansible. This gave me systematic space to document my findings, to write some readme\u0026rsquo;s etc.\nNotion, Roam-Research \u0026amp; Co Neovim i3, Sway and Tmux Custom Keyboard Keyboard centric workflow Project Readme\u0026rsquo;s, GitHub issues, Wikis Flat File System Next steps Automate publishing of my internal ZK to my Hugo blog.\n","permalink":"https://dzintars.dev/posts/my-note-taking-system/","summary":"Why For a long time I didn\u0026rsquo;t care about the note taking too much, thou, I was writing long MS Word documents with the ideas of the project, user stories and other things.\nIt all changed when I switched to the Linux. Because Linux was pretty much new to me, I had a lot to learn and remember. So, gradually I started to write my little runbooks to document the steps I took to get to the point B.","title":"My Note Taking System"},{"content":"As I\u0026rsquo;m setting up my shiny new blog, I stuck at Google Analytics integration. It looks like official PaperMod lacks some documentation on this topic.\nSo\u0026hellip; there is what worked for me.\nDon\u0026rsquo;t use analytics.google.SiteVerificationTag directive.\nUse only googleAnalytics: G-xxxxxxx directive.\nCreate new file in layouts/_internal/google_analytics.html and paste the entire code snippet you got from GA property setup page.\nBasically that\u0026rsquo;s it.\nThis partial will be automatically included in every Hugo page. And after your first visit to the page, you will see the firs visitor stats on your GA dashboard. If it doesn\u0026rsquo;t work immediately, then something is wrong.\nUse GitHub search to find setup examples. For example use this search query path:_internal/google_analytics.html.\nEthics Thou\u0026hellip; I am very triggered about everything anti-privacy\u0026hellip; this is a weird situation where I do encounter dilemma. Like\u0026hellip; I have no intention to track users, but in the same time I do want to see statistics about my blog. What articles went good, which were bad. And so on. IDK\u0026hellip; I will think about this case.\nResources Today I accidentally came up to this PaperMod discussion\n","permalink":"https://dzintars.dev/posts/how-to-integrate-google-analytics-into-hugo-papermod-theme/","summary":"As I\u0026rsquo;m setting up my shiny new blog, I stuck at Google Analytics integration. It looks like official PaperMod lacks some documentation on this topic.\nSo\u0026hellip; there is what worked for me.\nDon\u0026rsquo;t use analytics.google.SiteVerificationTag directive.\nUse only googleAnalytics: G-xxxxxxx directive.\nCreate new file in layouts/_internal/google_analytics.html and paste the entire code snippet you got from GA property setup page.\nBasically that\u0026rsquo;s it.\nThis partial will be automatically included in every Hugo page.","title":"How to Integrate Google Analytics Into Hugo PaperMod Theme"},{"content":"For a very long time I was Windows only user. Nor did I liked it, nor did I hated it. I just was somewhat above average user. But it all ended when I started to work with Go and Kafka Go library which I needed to cross-compile for an Linux system. And it was pain. CygWin, MinGW an a lot of gymnastics around it. In parallel I was trying to be in the \u0026ldquo;microservices\u0026rdquo; hype train. I was constantly running like 20 terminal windows for each little service, observing logs, restarting, compiling, etc. It was a pain.\nAnd mostly because of that Kafka issue, I decided to go full in Linux. Fedora 28 was my very first full-time Linux OS. At first\u0026hellip; it was a little bit pain. I used default Gnome GUI. Application windows was all around. Workspaces, windows\u0026hellip; constantly looking for the right thing. But at least Kafka libs was compiling buttery smooth. And it was fast. And it was fancy.\nSlowly I learned about different terminal emulators, multiplexers, text editors and what not.\nTailing Window Manager Tmux Neovim Custom Mechanical Split Keyboard ","permalink":"https://dzintars.dev/posts/my-cli-centric-workflow/","summary":"For a very long time I was Windows only user. Nor did I liked it, nor did I hated it. I just was somewhat above average user. But it all ended when I started to work with Go and Kafka Go library which I needed to cross-compile for an Linux system. And it was pain. CygWin, MinGW an a lot of gymnastics around it. In parallel I was trying to be in the \u0026ldquo;microservices\u0026rdquo; hype train.","title":"My CLI Centric Workflow"},{"content":"Why I had this idea about the highly reactive collaborative web application. After messing around I ended up with PoC which consisted of bunch of Go services and on top of that I somewhat implemented CQRS architecture.\nHow front wss srp\nGeneral idea was that websocket is used as protocol. Custom message format is created and synchronized between TypeScript and Go with help of Protocol Buffers, gRPC and few gRPC extensions. But this process is bit cumbersome and this is where I went off-road into Bazel and DevOps\u0026hellip;\nWeb produces and streams events to Kafka consumers. Once data are processed some messages are broadcasted over websocket to the application. This basically enables fast real-time collaboration in application.\nChallenges Little to almost none of the content in the Internet to learn in depth about these concepts. Especially if you are newbie like me and don\u0026rsquo;t know even how to ask the question. And if you do ask, then typical answer is\nyou don\u0026rsquo;t need this.\nBut\u0026hellip; I didn\u0026rsquo;t want to argue with some random person in the internet whether I need or don\u0026rsquo;t need this complexity. So\u0026hellip; I gave up with asking these kind of questions to the internet.\nAnd my best source of learning became GitHub Search\n","permalink":"https://dzintars.dev/posts/websockets-and-kafka/","summary":"Why I had this idea about the highly reactive collaborative web application. After messing around I ended up with PoC which consisted of bunch of Go services and on top of that I somewhat implemented CQRS architecture.\nHow front wss srp\nGeneral idea was that websocket is used as protocol. Custom message format is created and synchronized between TypeScript and Go with help of Protocol Buffers, gRPC and few gRPC extensions.","title":"Websockets and Kafka"},{"content":"Tinkering with my Hugo blog I\u0026rsquo;m still not sure what will I do with it, but\u0026hellip; at least this will be done.\nI picked Hugo as it seems simple enough for my current needs. Just drop some markdown and you are done. Sounds good. I don\u0026rsquo;t even plan to customize default theme for now as typography looks good, theme is supported. Like\u0026hellip; there is everything I need. Most important goal for me is to start accumulate some content.\nHugo seems doesn\u0026rsquo;t support target=\u0026quot;_blank\u0026quot; for an external links. So, top menu GitHub link opens in the same tab which I don\u0026rsquo;t like. I just removed it.\nI like this gruvbox theme.\n","permalink":"https://dzintars.dev/posts/2024-feb-21/","summary":"Tinkering with my Hugo blog I\u0026rsquo;m still not sure what will I do with it, but\u0026hellip; at least this will be done.\nI picked Hugo as it seems simple enough for my current needs. Just drop some markdown and you are done. Sounds good. I don\u0026rsquo;t even plan to customize default theme for now as typography looks good, theme is supported. Like\u0026hellip; there is everything I need. Most important goal for me is to start accumulate some content.","title":"2024 Feb 21"},{"content":" This post is a public draft, which may or may not be completed. As new thoughts come to mind, I may improve this article over time.\nPC Monitor setup I\u0026rsquo;ve been everywhere. From a single tiny 15\u0026quot; laptop to 4 screens + TV. But currently I\u0026rsquo;m at two monitor setup and even seriously considering one 32\u0026quot; 4K monitor setup. The thing about the multi-monitor setup is that it is misleading feeling about boosted productivity, because you \u0026ldquo;control\u0026rdquo; more things at once. In reality, you get more distracted from your current particular task. But most users doesn\u0026rsquo;t recognize that. I figured that out when suddenly one of my screens went into dark and I was lazy enough not to deal with that. Instead I just worked on a single screen for several weeks or even months. And you know\u0026hellip; i liked it! At any single given time i have only one task in front of me. And the key for this comfort was customized key binds on my home row for quick workspace switch. I can navigate all my workspaces in a split second. Back and forward. I am huge proponent of mastering your keyboard and tailoring your navigation around the OS. Everything should be in the right place for no-effort execution. If navigation is pain for you, you will look for the things like 4 to 6 monitor setups which is just awful.\nKeyboard Mouse Nothing fancy there. Just some regular Logitech Mx something something. The only note i can say about this - NEVER buy white mouse! No matter how often you wash your hands, that mouse will get dark and yellowish because of your hand sweat. My worst decision EVER!\nPC Accessories Nothing fancy there as well. Just few mainstream web cameras which I rarely use, YubiKey, external drive, flash drives. Basically that\u0026rsquo;s it. Oh\u0026hellip; i have some massive 5.1 sound system, which i basically never use. Most of the time I\u0026rsquo;m in my Jabra headphones. But lately I\u0026rsquo;m noticing, that most of the time I sit with the headphones on me but in the total silence.\nLinux For quite some years I now use Linux as my daily driver.\nWhen you install Windows, by default you get about 40-50 GB of \u0026ldquo;only God knows what\u0026rdquo; bloatware. You can\u0026rsquo;t even turn off that OneDrive malware just with a single click. And I don\u0026rsquo;t care about Windows average target audience and requirements to support every single language pack or what not. Where I am, my OS needs to have only one set of localization. And every bloatware, I care about, I should be able to install on my own. And yes, I care about those 50 GB. Other thing is when you get deeper into some cross-compilation stuff, Windows there are in some weird state with some crazy registry manipulations, some shady workaround installations, CygWin, MinGW, etc. just to get things going. Not a skill-issue, but \u0026hellip; it\u0026rsquo;s just trashy experience. And last time I checked, WSL still was an garbage, but good enough garbage to do some light front-end development. Nothing more. Even most of the Ansible modules doesn\u0026rsquo;t care about Windows and you can\u0026rsquo;t automate it effortlessly. All the time some hacking around to get simple things going. I am not an Windows hater. Windows is great OS for it\u0026rsquo;s target audience. But for my requirements, it became a garbage which I\u0026rsquo;m glad I threw out. Forever.\nSo, the summer of 2018 was my complete switch to The Linux. Cold turkey way.\nWhen you install Linux server edition, you get about 600 MB of pure OS with no any garbage on it.\nCLI centric workflow KeePassXC \u0026amp; YubiKey Tiling Window Manager Tmux Sessions Resurrect Continuum Vim-tmux-navigator Sensible Yank Power Must have settings: Other keybinds/Sway.\nNeovim Linters Note Taking ","permalink":"https://dzintars.dev/posts/my-personal-productivity-environment/","summary":"This post is a public draft, which may or may not be completed. As new thoughts come to mind, I may improve this article over time.\nPC Monitor setup I\u0026rsquo;ve been everywhere. From a single tiny 15\u0026quot; laptop to 4 screens + TV. But currently I\u0026rsquo;m at two monitor setup and even seriously considering one 32\u0026quot; 4K monitor setup. The thing about the multi-monitor setup is that it is misleading feeling about boosted productivity, because you \u0026ldquo;control\u0026rdquo; more things at once.","title":"My Personal Productivity Environment"},{"content":"About the Project It\u0026rsquo;s a SPA-style web application based on a bunch of buzzword technologies, most importantly Web Components. The idea behind choosing web components was to accumulate a bunch of reusable components that would be framework-agnostic over time. At the time of creating the project, React was the only framework that didn\u0026rsquo;t support web components, but times might have changed since then.\nTODO: Add some images\nTIL (Today I Learned) Redux features: Thinking in terms of \u0026ldquo;features\u0026rdquo; helped me come up with a better code structure.\nWebpack config organization: Not a significant challenge, but I found a nice finding that I can compose different configs depending on the environment. However, Webpack doesn\u0026rsquo;t integrate well with Bazel because it\u0026rsquo;s hard to get Hot Module Replacement (HMR) working with the Bazel runner and to preserve the app state. I\u0026rsquo;m considering going with a full deployment cycle; Bazel should be able to run a container in a few seconds. But I\u0026rsquo;m not sure how to deal with the app state if I still use Redux. Local storage? WebSocket?\nSASS/SMACSS: I tried to inject SASS into Lit (LitElement) templates; it should be possible, but I\u0026rsquo;m not sure how good of an idea it is. Modern CSS is pretty great to work with.\nFigma: An amazing tool! Premium is worth every penny as it allows you to properly structure large projects. At that time, I was missing design tokens, a.k.a. variables.\nP.S. I\u0026rsquo;m happy that Adobe deal failed.\nMistakes and Challenges It was challenging to establish a \u0026ldquo;good\u0026rdquo; project structure. For example, it took some time until I found out about Redux \u0026ldquo;features\u0026rdquo;. Also, currently, I\u0026rsquo;m not 100% sure if I want to go with a single store approach at all. I like Redux, but I\u0026rsquo;m not sure if it\u0026rsquo;s the best solution for the kind of application I\u0026rsquo;m trying to work on. I\u0026rsquo;m looking into something more \u0026ldquo;reactive\u0026rdquo;, maybe RxJS? I also looked into redux-dynamic-modules, which could be a backup \u0026ldquo;concept\u0026rdquo; if my \u0026ldquo;reactivity\u0026rdquo; approach does not work out.\nI created an entire authentication UI, but later, after gaining some experience, I realized that it was a mistake because ideally, I should use some Single Sign-On (SSO) solution, and in my case, it will be Keycloak because it\u0026rsquo;s a widely adopted (maintained) open-source project.\nIt is a bit challenging to come up with a user-friendly, ergonomic, and at the same time, \u0026ldquo;power user\u0026rdquo; UI. If you make it too user-friendly, there will be too much clicking around for power users. If you make it look clean, power users will not like it as they expect maximum screen real estate to be filled with useful data. Also, power users like \u0026ldquo;windows\u0026rdquo;; they are comfortable working with multiple modals and dialogs. But that is not \u0026ldquo;accessibility-friendly\u0026rdquo;, nor is it easy to develop/maintain. So, my goal is to start from the bottom up. I will go for mainstream users with the \u0026ldquo;task-based UI\u0026rdquo; approach first: simple components that do one thing and do it well, with maximum composability. Then, I will create a \u0026ldquo;condensed\u0026rdquo; version of the same component and give power users the ability to configure the component version.\nAlso, I\u0026rsquo;m almost sure that a SPA is not the right solution there, and I should go with an MPA approach for long-term maintainability and scaling reasons.\nHow to combine \u0026ldquo;free to use\u0026rdquo; with \u0026ldquo;I, as a user, want something more than just free\u0026rdquo;? My idea is to give the tool for free to use; if the back office doesn\u0026rsquo;t cost me anything other than development, then the user should be able to use the tool for free. But if they want collaboration features, backup storage, online access to some data sets, and so on, then they must go with the paid version, as that will cost me money to store, backup, and maintain. The challenge is how to enable a seamless transition from free to paid and back so that user data is \u0026ldquo;moved\u0026rdquo; from local storage to the servers or vice versa.\nCurrent Status I would say\u0026hellip; it\u0026rsquo;s temporarily abandoned\u0026hellip;\nIt all stopped at the point where I was trying to generate Go stubs and TypeScript message types from Protobufs. I succeeded, but the process was not streamlined because I had to manually update a bunch of things in order to implement generated artifacts. This is where I turned to Bazel. My early tests showed that Bazel is great for these kinds of tasks, and it is really fast.\nPlans If I am able to recall my memory on that project, I might continue to work on it later. It wasn\u0026rsquo;t that bad. I liked many things about it. I just need the \u0026ldquo;development platform\u0026rdquo; to run smoothly so that I don\u0026rsquo;t need to think much about shipping. I want to automate everything I can.\n","permalink":"https://dzintars.dev/posts/spa-front-page-application/","summary":"About the Project It\u0026rsquo;s a SPA-style web application based on a bunch of buzzword technologies, most importantly Web Components. The idea behind choosing web components was to accumulate a bunch of reusable components that would be framework-agnostic over time. At the time of creating the project, React was the only framework that didn\u0026rsquo;t support web components, but times might have changed since then.\nTODO: Add some images\nTIL (Today I Learned) Redux features: Thinking in terms of \u0026ldquo;features\u0026rdquo; helped me come up with a better code structure.","title":"SPA Front page application"}]