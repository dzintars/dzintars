[{"content":"","permalink":"https://dzintars.dev/posts/zettelkasten-note-taking/","summary":"","title":"Zettelkasten Note Taking"},{"content":"Why I had this idea about the highly reactive collaborative web application. After messing around I ended up with PoC which consisted of bunch of Go services and on top of that I somewhat implemented CQRS architecture.\nHow front wss srp\nGeneral idea was that websocket is used as protocol. Custom message format is created and synchronized between TypeScript and Go with help of Protocol Buffers, gRPC and few gRPC extensions. But this process is bit cumbersome and this is where I went off-road into Bazel and DevOps\u0026hellip;\nWeb produces and streams events to Kafka consumers. Once data are processed some messages are broadcasted over websocket to the application. This basically enables fast real-time collaboration in application.\nChallenges Little to almost none of the content in the Internet to learn in depth about these concepts. Especially if you are newbie like me and don\u0026rsquo;t know even how to ask the question. And if you do ask, then typical answer is\nyou don\u0026rsquo;t need this.\nBut\u0026hellip; I didn\u0026rsquo;t want to argue with some random person in the internet whether I need or don\u0026rsquo;t need this complexity. So\u0026hellip; I gave up with asking these kind of questions to the internet.\nAnd my best source of learning became GitHub Search\n","permalink":"https://dzintars.dev/posts/websockets-and-kafka/","summary":"Why I had this idea about the highly reactive collaborative web application. After messing around I ended up with PoC which consisted of bunch of Go services and on top of that I somewhat implemented CQRS architecture.\nHow front wss srp\nGeneral idea was that websocket is used as protocol. Custom message format is created and synchronized between TypeScript and Go with help of Protocol Buffers, gRPC and few gRPC extensions.","title":"Websockets and Kafka"},{"content":"Tinkering with my Hugo blog I\u0026rsquo;m still not sure what will I do with it, but\u0026hellip; at least this will be done.\nI picked Hugo as it seems simple enough for my current needs. Just drop some markdown and you are done. Sounds good. I don\u0026rsquo;t even plan to customize default theme for now as typography looks good, theme is supported. Like\u0026hellip; there is everything I need. Most important goal for me is to start accumulate some content.\nHugo seems doesn\u0026rsquo;t support target=\u0026quot;_blank\u0026quot; for an external links. So, top menu GitHub link opens in the same tab which I don\u0026rsquo;t like. I just removed it.\nI like this gruvbox theme.\n","permalink":"https://dzintars.dev/posts/2024-feb-21/","summary":"Tinkering with my Hugo blog I\u0026rsquo;m still not sure what will I do with it, but\u0026hellip; at least this will be done.\nI picked Hugo as it seems simple enough for my current needs. Just drop some markdown and you are done. Sounds good. I don\u0026rsquo;t even plan to customize default theme for now as typography looks good, theme is supported. Like\u0026hellip; there is everything I need. Most important goal for me is to start accumulate some content.","title":"2024 Feb 21"},{"content":"Linux For quite some years I now use Linux as my daily driver.\nCLI centric workflow ","permalink":"https://dzintars.dev/posts/my-setup/","summary":"Linux For quite some years I now use Linux as my daily driver.\nCLI centric workflow ","title":"My Setup"},{"content":"About the project It\u0026rsquo;s a SPA kind of web application based on bunch of buzzword technologies, most importantly Web Components. The idea behind picking web components was that over time I will accumulate bunch of reusable components which will be any framework agnostic. At time of creating that project React was the only framework which didn\u0026rsquo;t support web components, but times might be changed since then.\nImages\nTIL Redux features\nWebPack config organization\nSMACSS/SASS (tried to inject SASS into templates)\u0026hellip; it should be possible, but not sure how good is that idea. Modern CSS is pretty great to work with.\nFigma\nMistakes and Challenges It was challenging to get around the \u0026ldquo;good\u0026rdquo; project structure. For example, it took some time until I found out about Redux \u0026ldquo;features\u0026rdquo;.\nI created entire authentication UI but later after some experience gained I understand that that was a mistake because, ideally I should use some SSO solution and in my case it will be Keycloak.\nCurrent status I would say it\u0026rsquo;s abandoned\u0026hellip; for now\u0026hellip;\nIt all stopped the point where I was trying to generate Go stubs and TypeScript message types from Protobufs. I succeeded, but the process of that was not streamlined because I was required to manually update bunch of things in order to implement generated artifacts. This is where I went for the Bazel. My early tests showcased that Bazel is great for these kind of tasks and it is fast.\n","permalink":"https://dzintars.dev/posts/front/","summary":"About the project It\u0026rsquo;s a SPA kind of web application based on bunch of buzzword technologies, most importantly Web Components. The idea behind picking web components was that over time I will accumulate bunch of reusable components which will be any framework agnostic. At time of creating that project React was the only framework which didn\u0026rsquo;t support web components, but times might be changed since then.\nImages\nTIL Redux features","title":"SPA Front page application"}]